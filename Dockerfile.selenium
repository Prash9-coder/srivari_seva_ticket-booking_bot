# Alternative Dockerfile using Selenium base image
FROM selenium/standalone-chrome:latest

# Switch to root user to install Python
USER root

# Install Python and dependencies
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3-pip \
    python3.11-venv \
    && rm -rf /var/lib/apt/lists/*

# Create symbolic links for python commands
RUN ln -sf /usr/bin/python3.11 /usr/bin/python \
    && ln -sf /usr/bin/pip3 /usr/bin/pip

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application files
COPY . .

# Create necessary directories
RUN mkdir -p uploads chrome_profile downloads debug_screenshots

# Set environment variables
ENV DISPLAY=:99
ENV PYTHONUNBUFFERED=1
ENV CHROME_BIN=/usr/bin/google-chrome
ENV CHROMEDRIVER_PATH=/usr/bin/chromedriver

# Create startup script that works with Selenium container
RUN echo '#!/bin/bash\n\
    # Start Xvfb (virtual display)\n\
    Xvfb :99 -screen 0 1920x1080x24 -ac +extension GLX +render -noreset &\n\
    # Wait for display to be ready\n\
    sleep 3\n\
    # Start the FastAPI application\n\
    python -m uvicorn api_server:app --host 0.0.0.0 --port $PORT\n\
    ' > /app/start.sh && chmod +x /app/start.sh

# Expose port
EXPOSE 8000

# Start the application
CMD ["/app/start.sh"]